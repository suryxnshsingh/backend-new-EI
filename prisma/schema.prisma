datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  STUDENT
  TEACHER
  ADMIN
}

enum EnrollmentStatus {
  PENDING
  ACCEPTED
  REJECTED
}

// Users -----------------------------------------------------------------------------------------
model User {
  id        Int      @id @default(autoincrement())
  firstName String   @map("first_name")
  lastName  String   @map("last_name")
  email     String   @unique
  password  String
  role      Role
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  student   Student?
  teacher   Teacher?
  admin     Admin?
  ResetToken ResetToken?

  @@map("users")
  Quiz Quiz[]
  QuizAttempt QuizAttempt[]
}

model Student {
  id               Int      @id @default(autoincrement())
  firstName        String   @map("first_name")
  lastName         String   @map("last_name")
  enrollmentNumber String?  @map("enrollment_number")
  
  // Foreign key to the User model (ensure this matches the cookie value)
  userId           Int      @unique @map("user_id")
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Relation fields
  enrollments           Enrollment[]
  responses             AttendanceResponse[]
  assignmentSubmissions AssignmentSubmission[]

  @@map("students")
}

model Teacher {
  id        Int      @id @default(autoincrement())
  firstName String   @map("first_name")
  lastName  String   @map("last_name")
  
  // Relation fields
  userId    Int      @unique @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  courses   Course[]
  quizzes   Quiz[]
  attendance Attendance[]
  co        CO[]

  @@map("teachers")
}

model Admin {
  id        Int      @id @default(autoincrement())
  firstName String   @map("first_name")
  lastName  String   @map("last_name")
  
  // Relation fields
  userId    Int      @unique @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("admins")
}

// Enrollment (Join Table) -----------------------------------------------------------------------------------------
model Enrollment {
  id        Int      @id @default(autoincrement())
  studentId Int      @map("student_id")
  courseId  Int      @map("course_id")
  status    EnrollmentStatus @default(PENDING)
  enrolledAt DateTime @default(now()) @map("enrolled_at")

  // Relations
  student   Student  @relation(fields: [studentId], references: [id])
  course    Course   @relation(fields: [courseId], references: [id])

  @@unique([studentId, courseId])
  @@map("enrollments")
}

// Courses -----------------------------------------------------------------------------------------
model Course {
  id          Int      @id @default(autoincrement())
  name        String   
  courseCode  String   @map("course_code")
  session     String
  semester    String
  
  // Relation fields
  teacherId   Int      @map("teacher_id")
  teacher     Teacher  @relation(fields: [teacherId], references: [id])
  
  // Relations
  enrollments Enrollment[]
  quizzes     Quiz[]
  attendance  Attendance[]
  assignments Assignment[]
  notes       Notes[]
  co          CO[]

  @@map("courses")
}

// Quiz System -----------------------------------------------------------------------------------------
// Question Types Enum
enum QuestionType {
  SINGLE_MCQ
  MULTI_MCQ
  NUMERICAL
  DESCRIPTIVE
  SIMULATOR  // For future simulator integration
}
// Base Models
model Quiz {
  id          String    @id @default(uuid())  // Changed to String with UUID
  title       String
  description String?
  timeLimit   Int?       // in minutes
  scheduledFor DateTime?  // New field for quiz schedule
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  isActive    Boolean    @default(true)
  questions   Question[]
  attempts    QuizAttempt[]
  createdBy   User       @relation(fields: [userId], references: [id])
  userId      Int
  maxMarks    Float?

  // Fix the Course relationship
  courseId    Int      // Add this field
  course      Course   @relation(fields: [courseId], references: [id]) // Change to single relation
  Teacher     Teacher[]

  @@index([courseId])
}
model Question {
  id              String        @id @default(uuid())
  quizId          String       // Changed to String to match Quiz.id
  quiz            Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
  type            QuestionType
  text            String
  marks          Float
  imageUrl        String?      // For question images
  options         Option[]     // For MCQ types
  correctAnswer   Decimal?     // For NUMERICAL type (ensures precision)
  tolerance       Float?       // For NUMERICAL type (acceptable margin of error)
  answers         Answer[]     // Student answers
  order          Int          // Question order in quiz
  metadata        Json?        // Flexible field for future extensions (simulator configs etc.)
  keywords        String[]    // List of keywords for grading
  threshold       Float?       // Percentage threshold for full marks
}
model Option {
  id          String    @id @default(uuid())
  questionId  String
  question    Question  @relation(fields: [questionId], references: [id], onDelete: Cascade)
  text        String
  isCorrect   Boolean   // For MCQ types
}
model Answer {
  id          String      @id @default(uuid())
  questionId  String
  question    Question    @relation(fields: [questionId], references: [id], onDelete: Cascade)
  attemptId   String
  attempt     QuizAttempt @relation(fields: [attemptId], references: [id])
  selectedOptions String[] // For MCQ types (store option IDs)
  textAnswer   String?    // For DESCRIPTIVE/NUMERICAL types
  isCorrect    Boolean?   // Can be null for DESCRIPTIVE
  score        Float?     // Marks obtained
  metadata     Json?      // For future extensions (simulator answers etc.)
  keywordMatchPercentage Float? // Percentage of matched keywords
}
model QuizAttempt {
  id          String    @id @default(uuid())
  quizId      String    
  quiz        Quiz      @relation(fields: [quizId], references: [id], onDelete: Cascade) // Added onDelete: Cascade
  userId      Int
  user        User      @relation(fields: [userId], references: [id])
  startedAt   DateTime  @default(now())
  submittedAt DateTime?
  answers     Answer[]
  score       Float?
  status      AttemptStatus @default(IN_PROGRESS)
}
enum AttemptStatus {
  IN_PROGRESS
  SUBMITTED
  EVALUATED
}

// Attendance System ---------------------------------------------------------------------------
model Attendance {
  id            Int       @id @default(autoincrement())
  courseId      Int       @map("course_id")
  teacherId     Int       @map("teacher_id")
  date          String
  isActive      Boolean   @default(false) @map("is_active")
  duration      Int
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // Relations
  course        Course    @relation(fields: [courseId], references: [id])
  teacher       Teacher   @relation(fields: [teacherId], references: [id])
  responses     AttendanceResponse[]

  @@map("attendance")
}

model AttendanceResponse {
  id            Int       @id @default(autoincrement())
  attendanceId  Int       @map("attendance_id")
  studentId     Int       @map("student_id")
  timestamp     DateTime  @default(now())

  // Relations
  attendance    Attendance @relation(fields: [attendanceId], references: [id])
  student       Student    @relation(fields: [studentId], references: [id])

  @@map("attendance_responses")
}

// Assignment System -----------------------------------------------------------------------------------------
model Assignment {
  id                Int       @id @default(autoincrement())
  courseId          Int       @map("course_id")
  title             String
  description       String
  dueDate           DateTime  @map("due_date")                    // Changed to DateTime for proper timestamp comparison
  maxMarks          Float?    @map("max_marks")
  fileUrl           String?   @map("file_url")                    // Store file URL instead of bytes
  acceptingSubmissions Boolean @default(true) @map("accepting_submissions")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  // Relations
  course            Course    @relation(fields: [courseId], references: [id])
  submissions       AssignmentSubmission[]

  @@map("assignments")
}

model AssignmentSubmission {
  id              Int       @id @default(autoincrement())
  assignmentId    Int       @map("assignment_id")
  studentId       Int       @map("student_id")
  submissionDate  DateTime  @default(now()) @map("submission_date")
  fileUrl         String?   @map("file_url")                    // Store file URL instead of bytes
  note            String?                                       // Added optional note field
  isLate          Boolean   @default(false) @map("is_late")    // Added late submission flag
  
  // Relations
  assignment      Assignment @relation(fields: [assignmentId], references: [id])
  student         Student    @relation(fields: [studentId], references: [id])

  @@map("assignment_submissions")
  @@unique([assignmentId, studentId])                          // Prevent multiple submissions per student
}

// CO -----------------------------------------------------------------------------------------

model CO {
  id        Int      @id @default(autoincrement())

  MST1_Q1             String
  MST1_Q2             String
  MST1_Q3             String
  MST2_Q1             String
  MST2_Q2             String
  MST2_Q3             String

  // Relation fields
  courseId      Int            @map("course_id")
  teacherId     Int            @map("teacher_id")
  course        Course         @relation(fields: [courseId], references: [id])
  teacher       Teacher        @relation(fields: [teacherId], references: [id])

  @@map("co")
}

// Password Reset Token Table -----------------------------------------------------------------------------------------
model ResetToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int      @unique @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  expiresAt DateTime @default(dbgenerated("now() + interval '10 minutes'")) @map("expires_at")

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("reset_tokens")
}

// Notes -----------------------------------------------------------------------------------------
model Notes {
  id                Int       @id @default(autoincrement())
  courseId          Int       @map("course_id")
  title             String
  description       String
  fileUrl           String?   @map("file_url")
  createdAt         DateTime  @default(now()) @map("created_at")

  // Relations
  course            Course    @relation(fields: [courseId], references: [id])

  @@map("notes")
}